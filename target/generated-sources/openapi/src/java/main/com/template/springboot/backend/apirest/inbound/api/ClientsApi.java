/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.template.springboot.backend.apirest.inbound.api;

import com.template.springboot.backend.apirest.inbound.dto.Client;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-26T20:57:27.424315+02:00[Europe/Madrid]")
@Validated
@Tag(name = "clients", description = "the clients API")
@RequestMapping("${openapi.client.base-path:}")
public interface ClientsApi {

    /**
     * POST /clients
     * Add A Client
     *
     * @param client  (optional)
     * @return Client added successfully (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "addClient",
        responses = {
            @ApiResponse(responseCode = "201", description = "Client added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Client> addClient(
        @Parameter(name = "Client", description = "") @Valid @RequestBody(required = false) Client client
    );


    /**
     * GET /clients
     * Get All Clients
     *
     * @return All Clients are returned (status code 200)
     *         or No Clients returned (status code 404)
     *         or test (status code 500)
     */
    @Operation(
        operationId = "getAllClients",
        responses = {
            @ApiResponse(responseCode = "200", description = "All Clients are returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            }),
            @ApiResponse(responseCode = "404", description = "No Clients returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "test", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json" }
    )
    ResponseEntity<List<Client>> getAllClients(
        
    );

}
